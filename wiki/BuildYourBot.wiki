#summary How you can build your own Bot
#labels Featured

= Introduction =

*!LangBots* allows the bots to be written in any language because the interface with the bot  is completely modularized. The bot received the state of the field through the standard input and writes the commands in the standard output, all in text format. That's a universal way of inter-process communication thus it should run in any platform and any (decent) programming language.

= How it works =

 #. The bot is executed with the configuration YAML as first argument
 #. The bot reads from standard input YAML structures, separated by an empty line.
 #. For each read YAML the bot *MUST* respond with a command line, even if it's empty. Otherwise the events loop will hang

== Configuration ==

The file sent as first argument to the bot has the following structure:

 * robot: Hash containing the following keys:
  * type: Type of the tank. For now, 'tank1', it may change for future versions.
  * size: [width, height] of the robot (pixels)
  * shield: Start value for the shield.
  * max_speed: [max_forward_speed, max_backward_speed] (pixels/second)
  * rotation_max_speed: The maximum speed of the rotation of the robot (degrees/second).
  * turret_rotation_max_speed: The maximum speed of the rotation of the turret (relative to the robot) (degrees/second).
  * fire_min_interval: Interval between consecutive bullets.
  * bullet_speed: Speed of the bullets.
 * map: Hash containing the following keys:
  * size: [width, height] of the map (pixels).  

Example:

{{{
robot:
  type: tank1
  size: [36, 38]
  shield: 5
  max_speed: [200.0, 100.0]
  rotation_max_speed: 100.0
  turret_rotation_max_speed: 125.0
  fire_min_interval: 0.5
  bullet_speed: 300.0     
     
map:
  size: [640, 480]
}}}

== Field input ==

*Langbots* sends info about the field in YAML format. The structure contains the following fields:

 * id: String identifier of the update
 * robots: Hash with two keys: _me_ (my robot) and _others_ (the other robots). Each robot is a map with the following keys:
  * angle: Angle of the robot (degrees) counter-clockwise. 0ยบ is the robot looking to the right.
  * rotation: Rotation speed (degrees/second)
  * shield: Remaining shield (1 unit = 1 bullet impact). When reaches to zero the robot loses.
  * speed: Speed of the robot (pixels/second).
  * time_to_fire: How much time the robot has to wait till the gun is recharged and can fire again (that prevents the robot to send fire bursts).
  * turret_angle: Angle of the turret relative to the robot position (degrees).
  * turret_rotation: Speed of the turret rotation (degrees/second)
  * x: X-position (pixels). x=0 being the left side of the field.
  * Y: Y-position (pixels). y=0 being the upper side of the field.
 * bullets: List of bullets. Each bullet is a hash with the following keys:
  * x: X-position (pixels)
  * y: Y-position (pixels)
  * speed: Pixels (second)
  * angle: Linear speed of the bullet (pixels /second)

Example:

{{{
id: '0.68'
time: 0.68000000000000005
robots:
  me:
    angle: 9.7199999999997999
    rotation: -59.0
    shield: 5
    speed: 138.0
    time_to_fire: 0.5
    turret_angle: 77.920000000000186
    turret_rotation: 0.0
    x: 446.59649044204843
    y: 76.726805725693964
  others:
  - angle: 20.399999999999807
    rotation: 30.0
    shield: 5
    speed: 200.0
    time_to_fire: 0.46000000000000002
    turret_angle: 72.000000000000171
    turret_rotation: 0.0
    x: 453.39071947435502
    y: 361.43864856050476
bullets:
- angle: 87.999999999999829
  speed: 300.0
  x: 439.94896488608407
  y: 317.23843688980429
- angle: 87.079999999999814
  speed: 300.0
  x: 443.10054148534948
  y: 40.597155007198523
}}}

== Commands ==

The bot writes the response to the standard output using:

{{{
UPDATE-ID [COMMAND1 [ARG] [COMMAND2 [ARG] ...]
}}}

The commands are:

 * *set-speed* _SPEED_: Set robot speed. Examples: set-speed 150, set-speed -40
 * *set-rotation-speed* _SPEED_: Set rotation speed. Examples: set-rotation-speed 90
 * *set-turret-rotation-speed* _SPEED_: Set turret rotation speed. Examples: set-turret-rotation-speed 90.
 * *fire*: Fire a bullet. The command will be ignored if time_to_fire is not 0.0.
 * *rotate-turret-to-angle-and-fire*: You usually want to fire to a given absolute angle, so instead of using__set-turret-rotation-speed_ + _fire_ it's easier to use this command.

Example of command (responds to an update with id=1234):

{{{
1234 set-speed 40 set-rotation-speed -80 rotate-turret-to-angle-and-fire 45.0
}}}

Note that commands are executed in parallel so the order in which you write them is not important.

If you are initializing the robot you won't have an update id, you then use "-":

{{{
- set-speed 50
}}}

Remember to flush the channel after writing the command.